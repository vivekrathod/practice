quick sort 
- divide the range in two by picking an element in the range 
- left side has all elements less than the middle element, and the right side has elements greater than the middle element 
- repeat this procedure for these two ranges 
- stop when there are only two elements left

73789


void QuickSortSimple(int[] array, int start, int end)
{
	
}

void Partition(int[] array, int start, int end)
{
	int pivot = array[(start + (end-start)/2)];
	int left = start;
	int right = end;
	while (left <= right)
	{
		while (array[left] < pivot)
			left++;
		while (array[right] > pivot)
			right--;
			
		if (left < right)
		{
			swap(array, left, right);
			left++;
			right--;
		}
		
		return 	left;
	}
}

void QuickSort(int[] array, int start, int end)
{
	if (start == end)
		return;
		
	int l = start;
	int r = end;
	int m = l + (r-l)/2;
	
	// split left and right such that left side elements are smaller than mid element and right side are greater
	// numbers before l are always less than or equal to m, and numbers after r are always greater than or equal to m
	while(l <= r)
	{
		int mid = array[m];
		int left = array[l];
		int right = array[r];
		if (l < m && m < r)
		{
			if (left > mid)
			{
				swap(l,r);
				r--;
			}
			else
				l++;
		}
		else if (l == m)
			l++;
		else if (m == r)
			r--;
		else if (l == r)
		{
			if (m > l && mid < left) || (m < l && mid > left))
			{
				swap(l, m);
			}
			l++, r--;
		}
		else if (m < l && m < r)
		{
			if (left < mid)
			{
				swap(l,m);
				m = l;
			}
			l++;
		}
		else // (m > l && m > r) 
		{
			if (mid < left)
			{
				swap(l,m);
				m = l;
			}
			l++;
		}
	}
}

void Swap(int[] array, int l, int r)
{
	int temp = array[l];
	array[l] = array[r];
	array[r] = temp;
}



122430

